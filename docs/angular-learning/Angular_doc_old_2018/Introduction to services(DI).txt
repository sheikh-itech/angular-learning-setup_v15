Introduction to services and DI
================================

=>Service is a broad category encompassing any value, function, or feature that an app needs.
=>A service is typically a class with a narrow, well-defined purpose.
=>It should do something specific and do it well.
=>Angular distinguishes components from services in order to increase modularity and reusability.

"By separating a component's view-related functionality from other kinds of processing, you can make your component classes lean and efficient. Ideally, a component's job is to enable the user experience and nothing more."

=> Component should present properties and methods for data binding, in order to mediate between the view and the application logic (which often includes some notion of a model).

"A component should not need to define things like how to fetch data from the server, validate user input, or log directly to the console. Instead, it can delegate such tasks to services."

=>By defining reusable kind of processing task in an injectable service class, we make it available to any component.

=>Angular doesn't enforce these principles.(Not mandatory to create service, but suggested way)
=>Services can depend on other services.

Dependency injection
=====================

=>Components consume services; that is, you can inject a service into a component, giving the component access to that service class.

"To define a class as a service in Angular, use the @Injectable decorator to provide the metadata that allows Angular to inject it into a component as a dependency."

=>use the @Injectable decorator to indicate that a component or other class has a dependency. 

"Dependency injection is wired into the Angular framework and used everywhere to provide new components with the services or other things they need."

=>The injector is the main mechanism. We don't have to create an Angular injector. 
=>Angular creates an application-wide injector for us during the bootstrap process.
=>The injector maintains a container of dependency instances that it has already created, and reuses them if possible.
=>A provider is a recipe for creating a dependency.
=>For any dependency you need in your app, you must register a provider with the app's injector, so that the injector can use it to create new instances.

"When Angular creates a new instance of a component class, it determines which services or other dependencies that component needs by looking constructor parameters."

"When Angular discovers that a component depends on a service, it first checks if the injector already has any existing instances of that service. If a requested service instance does not yet exist, the injector makes one using the registered provider, and adds it to the injector before returning the service to Angular/app"

=>When all requested services have been resolved and returned, Angular can call the component's constructor with those services as arguments.

Providing services:
===================
=>We must register at least one provider of any service you are going to use. 
=>We can register providers in modules or in components.
=>When you add providers to the root module, the same instance of a service is available to all components in your app.

"When we register a provider at the component level, we get a new instance of the service with each new instance of that component."





















=
