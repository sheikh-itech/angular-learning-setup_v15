Architecture overview
======================

Angular is a platform and framework for building client applications in HTML and TypeScript.
The basic building blocks of an Angular application are NgModules, which provide a compilation context for components.
NgModules collect related code into functional sets
an Angular app is defined by a set of NgModules. 

Components define views=> which are sets of screen elements that Angular can choose among and modify according to your program logic and data. Every app has at least a root component.

Components use services
=>which provide specific functionality not directly related to views.
=> Service providers can be injected into components as dependencies, making your code modular, reusable, and efficient.

=>Both components and services are simply classes.

The metadata for a component class associates it with a template that defines a view. A template combines ordinary HTML with Angular directives and binding markup that allow Angular to modify the HTML before rendering it for display.

The metadata for a service class provides the information Angular needs to make it available to components through Dependency Injection (DI).

An app's components typically define many views, arranged hierarchically. Angular provides the Router service to help you define navigation paths among views. 

Modules:

=>An NgModule declares a compilation context for a set of components that is dedicated to an application domain, a workflow, or a closely related set of capabilities.
=>An NgModule can associate its components with related code, such as services, to form functional units.
=>Every Angular app has a root module,  conventionally named AppModule.
=>It provides the bootstrap mechanism that launches the application. 
=>An app typically contains many functional modules.
=>NgModules can import functionality from other NgModules and allow their own functionality to be exported
=>For example, to use the router service in your app, you import the Router NgModule.

"Organizing your code into distinct functional modules helps in managing development of complex applications, and in designing for reusability. In addition, this technique lets you take advantage of lazy-loading—that is, loading modules on demand—in order to minimize the amount of code that needs to be loaded at startup."

Components:

=>Every Angular application has at least one component, the root component that connects a component hierarchy with the page DOM.
=>Each component defines a class that contains application data and logic, and is associated with an HTML template that defines a view to be displayed in a target environment.
=>The @Component decorator identifies the class immediately below it as a component
=>It provides the template and related component-specific metadata.

"Decorators are functions that modify JavaScript classes. Angular defines a number of such decorators that attach specific kinds of metadata to classes, so that it knows what those classes mean and how they should work."

Templates, directives, and data binding:

=>A template combines HTML with Angular markup that can modify the HTML elements before they are displayed. 
=>Template directives provide program logic, and binding markup connects your application data and the document object model (DOM).
=>Event binding lets your app respond to user input in the target environment by updating your application data.
=>Property binding lets you interpolate values that are computed from your application data into the HTML.
=>Before a view is displayed, Angular evaluates the directives and resolves the binding syntax in the template to modify the HTML elements and DOM, according to program data/logic.
=>Angular supports two-way data binding, meaning that changes in the DOM, such as user choices, can also be reflected back into your program data.
=>Templates can use pipes to improve the user experience by transforming values for display.

Services and dependency injection:

=>For data/logic that is not associated with a specific view, and we want to share across components, creates a service class for that.
=>A service class definition is immediately preceded by the @Injectable decorator.
=>@Injectable decorator provides the metadata that allows your service to be injected into client components as dependency.

"Dependency injection (or DI) lets you keep your component classes lean and efficient. They don't fetch data from the server, validate user input, or log directly to the console; they delegate such tasks to services."

Routing:

The Angular Router NgModule provides a service that lets us define navigation path among the different application states and view hierarchies app.
=>Enter a URL in the address bar and the browser navigates to a corresponding page
=>Click links on the page and the browser navigates to a new page.
=>Browser navigates backward and forward through the history of pages you've seen(using forward/back).
=>The router maps URL-like paths to views instead of pages.
=>When a user performs an action, such as clicking a link, that would load a new page in the browser, the router intercepts the browser's behavior, and shows or hides view hierarchies.
=>If the router determines that the current application state requires particular functionality, and the module that defines it has not been loaded, the router can lazy-load the module on demand.
=>You can navigate to new views when the user clicks a button, selects from a drop box, or in response to some other stimulus from any source.
=>To define navigation rules, we associate navigation paths with our components.
=>A path uses a URL-like syntax that integrates our program data, in much the same way that template syntax integrates our views with program data.






