			Hierarchical Dependency
		===============================

Angular supports hierarchical Dependency Injection, 
Which means that when you define a provider at a certain level of the application, 
that provider is available to all components and services that are children of that level.
This makes it easy to share instances of services across your entire application, 
while also allowing you to override those instances at a more granular level if necessary

Example
-------

app
  - home
    - user-list
  - admin
    - user-list

Both the home and admin components have a user-list component as a child.
Instead of creating two separate instances of the user-list component, 
we can use DI to create a single instance of user-list at the app level and share it across both components

@NgModule({
  providers: [UserListService],
  // ...
})
export class RootModule { }


=>This makes the UserListService available to all components and services in the app module

@Component({
  // ...
})
export class HomeComponent {
  constructor(private uService: UserListService) { }
}

@Component({
  // ...
})
export class AdminComponent {
  constructor(private uService: UserListService) { }
}

Both components will receive the same instance of UserListService, 
And any changes made to the service in one component will be reflected in the other component as well.

However, if we need to override the UserListService instance for a specific component,
We can do so by defining a new provider at that level

@Component({
  providers: [{ provide: UserListService, useClass: CustomUserListService }],
  // ...
})
export class HomeComponent {
  constructor(private userListService: UserListService) { }
}

This will override the UserListService instance for the HomeComponent with CustomUserListService
